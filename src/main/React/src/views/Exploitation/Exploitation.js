import React, {Component} from 'react';
import {apiRequest} from "../../index";
import PlacesAutocomplete from 'react-places-autocomplete';
import Notifications, {notify} from 'react-notify-toast';
import { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';

class Exploitation extends Component {

    constructor(props) {
        super(props);
        this.state = {
            address: 'Rabat',
            countries: [],
            cities: [],
            villages: [],
            countryRef: '',
            cityRef: '',
            ref: '',
            name: '',
            area: '',
            lontitude: '',
            latitude: '',
            villageRef: ''
        };
        this.loadAllCountries();

    }

    onAddressChange = (address) =>{
        this.setState({
            address:address
        });
        console.log(this.state.address);

        geocodeByAddress(address)
            .then(results => getLatLng(results[0]))
            .then(latLng =>{
                console.log('Success', latLng);
                this.setState({
                    latitude:latLng.lat,
                    lontitude:latLng.lng,
                });
            })
            .catch(error => console.error('Error', error))
    };

    onChange = (e) => {
        console.log(e.target.name);
        console.log(e.target.value);
        this.setState({
            [e.target.name]: e.target.value,
        });
    };
    onCountryChange = (e) => {
        console.log(e.target.name);
        this.loadAllCities(e.target.value)
    };
    onCityChange = (e) => {
        console.log(e.target.name);
        this.loadAllVillages(e.target.value)
    };

    loadAllCountries = () => {

        apiRequest.get('/countries')
            .then((response) => {
                console.log(response.status);
                console.log(response.data);
                this.setState({
                    countries: response.data,
                    cities: [],
                    villages: []
                });
                console.log(this.state);

            });

    };

    loadAllCities = (countryRef) => {

        apiRequest.get('/countries/' + countryRef + '/cities')
            .then((response) => {
                console.log(response.status);
                console.log(response.data);
                this.setState({
                    countryRef: countryRef,
                    cities: response.data,
                    villages: []
                });
                console.log(this.state);
            });
    };

    loadAllVillages = (cityRef) => {

        apiRequest.get('/cities/' + cityRef + '/villages')
            .then((response) => {
                console.log(response.status);
                console.log(response.data);
                this.setState({
                    cityRef: cityRef,
                    villages: response.data
                });
                console.log(this.state);

            });
    };

    exploitationRegister = (e) => {

        e.preventDefault();
        console.log("----");
        console.log(this.state);

        let exploitation = {
            ref: this.state.ref,
            name: this.state.name,
            area: this.state.area,
            lontitude: this.state.lontitude,
            latitude: this.state.latitude,
            villageRef: this.state.villageRef
        };

        apiRequest.post('/exploitations', exploitation)
            .then((response) => {
                console.log(response.data);
                notify.show("hello");
                //alert("exploitation bien enregistrer")
            })
            .catch((error) => {
                if (error.response) {
                    console.log(error.response.data);
                    console.log(error.response.status);
                    console.log(error.response.headers);
                } else if (error.request) {
                    console.log(error.request);
                } else {
                    console.log('Error', error.message);
                }
                console.log(error.config);
            })

    };


    render() {
        const inputProps = {
            value: this.state.address,
            onChange: this.onAddressChange,
        };
        return (
            <div className="row justify-content-center">
                <div className="col-sm-6">
                    <div className="card">
                        <div className="card-header">
                            <strong>Add</strong>
                            <small>Exploitation</small>
                        </div>
                        <div className="card-block">
                            <div className="form-group">
                                <label htmlFor="reference">Reference</label>
                                <input type="text" className="form-control" id="ref"
                                       placeholder="Your exploitation reference" name="ref"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.ref}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="vat">Name</label>
                                <input type="text" className="form-control" id="name"
                                       placeholder="Exploitation  name" name="name"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.name}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="street">Area</label>
                                <input type="text" className="form-control" id="arae"
                                       placeholder="Arae of exploitation" name="area"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.area}/>
                            </div>
                            <label>Your exploitation location</label>
                            <PlacesAutocomplete inputProps={inputProps} />
                            <hr/>
                            <div className="form-group">
                                <label htmlFor="country">Lontitude</label>
                                <input type="text" className="form-control" id="lontitude"
                                       placeholder="exploitation lontitude" name="lontitude"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.lontitude}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="country">Latitude</label>
                                <input type="text" className="form-control" id="latitude"
                                       placeholder="exploitation latitude" name="latitude"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.latitude}/>
                            </div>
                            <hr/>
                            <div className="form-group row">
                                <label className="col-md-3 form-control-label" htmlFor="select">Select Country</label>
                                <div className="col-md-9">
                                    <select className="form-control" id="selectC" name="countryRef"
                                            onChange={e => this.onCountryChange(e)}
                                            defaultValue={this.state.countryRef}>
                                        {this.state.countries.map((co, i) => <option key={i}
                                                                                     value={co.ref}>{co.name}</option>)}
                                    </select>
                                </div>
                            </div>
                            <div className="form-group row">
                                <label className="col-md-3 form-control-label" htmlFor="select">Select City</label>
                                <div className="col-md-9">
                                    <select className="form-control" id="selectC" name="cityRef"
                                            onChange={e => this.onCityChange(e)} defaultValue={this.state.cityRef}>
                                        {this.state.cities.map((c, i) => <option key={i}
                                                                                 value={c.ref}>{c.name}</option>)}
                                    </select>
                                </div>
                            </div>
                            <div className="form-group row">
                                <label className="col-md-3 form-control-label" htmlFor="select">Select Village</label>
                                <div className="col-md-9">
                                    <select className="form-control" id="selectC" name="villageRef"
                                            onChange={e => this.onChange(e)} defaultValue={this.state.villageRef}>
                                        {this.state.villages.map((v, i) => <option key={i}
                                                                                   value={v.ref}>{v.name}</option>)}
                                    </select>
                                </div>
                            </div>
                            <button type="button" className="btn btn-block btn-success"
                                    onClick={this.exploitationRegister}>Submit Exploitation
                            </button>
                        </div>
                    </div>
                </div>
            </div>

        )
    }


}

 export default Exploitation;

// export default scriptLoader(
//     ["https://maps.googleapis.com/maps/api/js?key=AIzaSyBAr5gBIqpShebEDbC0QVspsUT2QP07xpY&libraries=places"]
// )(Exploitation)
