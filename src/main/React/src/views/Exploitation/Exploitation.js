import React, {Component} from 'react';
import {apiRequest} from "../../index";
import update from 'react-addons-update';

class Exploitation extends Component {

    constructor(props, country = null) {
        super(props);
        this.state = {
            countries: [],
            cities: [],
            villages: [],
            country: '',
            city: '',
            // exploitation: {
                ref: '',
                name: '',
                area: '',
                lontitude: '',
                latitude: '',
                villageRef:'',
                farmerId: 1

            // }
        };
        this.loadAllCountries();

    }

    onChange = (e) => {
        console.log(e.target.name);
        console.log(e.target.value);
        this.setState({
            [e.target.name]: e.target.value,

        });
        // let explo = update(this.state ,{
        //     exploitation:{
        //         [e.target.name] : e.target.value
        //     }
        // });
        // this.setState(explo);
        // console.log(this.state);
    };
    onCountryChange = (e) => {
        console.log(e.target.name);
        this.loadAllCities(e.target.value)
    };
    onCityChange = (e) => {
        console.log(e.target.name);
        this.loadAllVillages(e.target.value)
    };

    loadAllCountries() {

        apiRequest.headers = {};
        apiRequest.get('/countries')
            .then((response) => {
                console.log(response.status);
                console.log(response.data);
                console.log(response.data._embedded.countries);
                this.setState({
                    countries: response.data._embedded.countries,
                    cities: [],
                    villages: []
                });
                console.log(this.state);


            })
            .catch((error) => {
                if (error.response) {
                    console.log(error.response.data);
                    console.log(error.response.status);
                    console.log(error.response.headers);
                } else if (error.request) {
                    console.log(error.request);
                } else {
                    console.log('Error', error.message);
                }
                console.log(error.config);
            })
    }
     loadAllCities(country) {

        apiRequest.headers = {};
        apiRequest.get('/countries/'+country+'/cities')
            .then((response) => {
                console.log(response.status);
                console.log(response.data);
                this.setState({
                    country:country,
                    cities: response.data,
                    villages: []
                });
                console.log(this.state);


            })
            .catch((error) => {
                if (error.response) {
                    console.log(error.response.data);
                    console.log(error.response.status);
                    console.log(error.response.headers);
                } else if (error.request) {
                    console.log(error.request);
                } else {
                    console.log('Error', error.message);
                }
                console.log(error.config);
            })
    }
    loadAllVillages(city) {

        apiRequest.headers = {};
        apiRequest.get('/cities/'+city+'/villages')
            .then((response) => {
                console.log(response.status);
                console.log(response.data);
                this.setState({
                    city:city,
                    villages: response.data
                });
                console.log(this.state);


            })
            .catch((error) => {
                if (error.response) {
                    console.log(error.response.data);
                    console.log(error.response.status);
                    console.log(error.response.headers);
                } else if (error.request) {
                    console.log(error.request);
                } else {
                    console.log('Error', error.message);
                }
                console.log(error.config);
            })
    }

    exploitationRegister = async (e) => {
        e.preventDefault();

        apiRequest.headers = {};
        console.log("----");
        console.dir(this);
        apiRequest.post('/exploitations/store',this.state)
            .then((response) => {
                console.log(response);
                setTimeout(()=>{
                    alert("exploitation bien enregistrer")
                    // this.props.history.push(`/`)
                },100);
            })
            .catch((error) => {
                if (error.response) {
                    console.log(error.response.data);
                    console.log(error.response.status);
                    console.log(error.response.headers);
                } else if (error.request) {
                    console.log(error.request);
                } else {
                    console.log('Error', error.message);
                }
                console.log(error.config);
            })

    };


    render() {
        return (
            <div className="row justify-content-center">
                <div className="col-sm-6">
                    <div className="card">
                        <div className="card-header">
                            <strong>Add</strong>
                            <small>Exploitation</small>
                        </div>
                        <div className="card-block">
                            <div className="form-group">
                                <label htmlFor="reference">Reference</label>
                                <input type="text" className="form-control" id="ref"
                                       placeholder="Your exploitation reference" name="ref"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.ref}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="vat">Name</label>
                                <input type="text" className="form-control" id="name"
                                       placeholder="Exploitation  name" name="name"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.name}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="street">Area</label>
                                <input type="text" className="form-control" id="arae"
                                       placeholder="Arae of exploitation" name="area"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.area}/>
                            </div>
                            {/*<div className="row">*/}
                            {/*<div className="form-group col-sm-8">*/}
                            {/*<label htmlFor="city">Quantity</label>*/}
                            {/*<input type="text" className="form-control" id="city" placeholder="Enter your city"/>*/}
                            {/*</div>*/}
                            {/*<div className="form-group col-sm-4">*/}
                            {/*<label htmlFor="postal-code">Postal Code</label>*/}
                            {/*<input type="text" className="form-control" id="postal-code" placeholder="Postal Code"/>*/}
                            {/*</div>*/}
                            {/*</div>*/}
                            <div className="form-group">
                                <label htmlFor="country">Lontitude</label>
                                <input type="text" className="form-control" id="lontitude"
                                       placeholder="exploitation lontitude" name="lontitude"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.lontitude}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="country">Latitude</label>
                                <input type="text" className="form-control" id="latitude"
                                       placeholder="exploitation latitude" name="latitude"
                                       onChange={e => this.onChange(e)}
                                       value={this.state.latitude}/>
                            </div>
                            <div className="form-group row">
                                <label className="col-md-3 form-control-label" htmlFor="select">Select Country</label>
                                <div className="col-md-9">
                                    <select className="form-control" id="selectC" name="country"
                                            onChange={e => this.onCountryChange(e)} defaultValue={this.state.country}>
                                        {this.state.countries.map((co, i) => <option key={i}
                                                                                     value={co.ref}>{co.name}</option>)}
                                    </select>
                                </div>
                            </div>
                            <div className="form-group row">
                                <label className="col-md-3 form-control-label" htmlFor="select">Select City</label>
                                <div className="col-md-9">
                                    <select className="form-control" id="selectC" name="city"
                                            onChange={e => this.onCityChange(e)} defaultValue={this.state.city}>
                                        {this.state.cities.map((c, i) => <option key={i}
                                                                                 value={c.ref}>{c.name}</option>)}
                                    </select>
                                </div>
                            </div>
                            <div className="form-group row">
                                <label className="col-md-3 form-control-label" htmlFor="select">Select Village</label>
                                <div className="col-md-9">
                                    <select className="form-control" id="selectC" name="villageRef"
                                            onChange={e => this.onChange(e)} defaultValue={this.state.villageRef}>
                                        {this.state.villages.map((v, i) => <option key={i}
                                                                                   value={v.ref}>{v.name}</option>)}
                                    </select>
                                </div>
                            </div>
                            <button type="button" className="btn btn-block btn-success"
                                    onClick={this.exploitationRegister}>Submit Exploitation
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        )
    }


}

export default Exploitation;
